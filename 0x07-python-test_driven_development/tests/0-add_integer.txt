===================================
Test cases for the 0-add_integer module
===================================

The 0-add_integer module is to take two ints or floats as arguments and add them

Usage
=====

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers (a = 1 and b = 2)
    >>> add_integer(1, 2)
    3

Adding one positive and one negative integer (a = 100 and b = -2)
    >>> add_integer(100, -2)
    98

Adding two negative integers (a = -5 and b = -3)
    >>> add_integer(-5, -3)
    -8

Adding one argument int (ie. a = 4 and b = 98)
    >>> add_integer(4)
    102

Adding a positive float and a positive integer (a = 4.3 and b = 4)
    >>> add_integer(4.3, 4)
    8

Adding a float and an int where the int is equal to the default value of b (a = 4.5 and b = 98)
    >>> add_integer(4.5)
    102

Adding a positive float and a negative integer (a = 5.5 and b = -3)
	    >>> add_integer(5.5, -3)
	    2

Adding two float numbers (a = 2.5 and b = 4.5)
    >>> add_integer(2.5, 4.5)
    6

Adding two negative floats (a = -5.5 and b = -2.2)
	    >>> add_integer(-5.5, -2.2)
	    -7

Adding an integer number and a string (a = 4 and b = "School")
    >>> add_integer(4, "School")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing no argument to the function
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding a letter and a number (a = 'k' and b = 1)
    >>> add_integer('k', 1)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two letters (a = 'k' and b = 'n')
    >>> add_integer('c', 'n')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((2, 3))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(50, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing a only one string
    >>> add_integer("Sup")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
