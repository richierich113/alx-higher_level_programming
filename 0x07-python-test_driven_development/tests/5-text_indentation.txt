============================================
Functional Testing for 5-text_indentation.py
============================================

This module contains a function ``text_indentation(text)`` function that prints
a text with 2 new lines after each of these characters: `.`, `?` and `:`

Importing the function ``text_indentation(text)`` from module

::
    >>> text_indentation = __import__('5-text_indentation').text_indentation

Valid cases
=========

Passing "Hello?"
    >>> text_indentation("Hello?")
    Hello?
    <BLANKLINE>

Passing string with spaces at the beginning of a line.

::

    >>> text_indentation("   Hi there.")
    Hi there.
    <BLANKLINE>

Passing spaces

::

    >>> text_indentation("          ")

Passing string with spaces at the end of a line.

::

    >>> text_indentation("Hello.   ")
    Hello.
    <BLANKLINE>

Passing string with spaces within line.

::

    >>> text_indentation("    Woah now.    This is messy.   ")
    Woah now.
    <BLANKLINE>
    This is messy.
    <BLANKLINE>

Passing string without the characters as end of lines ``.``, ``?``, and ``:``

::

    >>> text_indentation("No ending period, what bad grammar")
    No ending period, what bad grammar

Passing strings with New lines

::

    >>> text_indentation("Let's print a new-line! Here goes:\nPrinted.")
    Let's print a new-line! Here goes:
    <BLANKLINE>
    <BLANKLINE>
    Printed.
    <BLANKLINE>

::

    >>> text_indentation("\n\n\n We just printed three new lines.")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    We just printed three new lines.
    <BLANKLINE>

::
    >>> text_indentation("A sneaky \n new line.")
    A sneaky 
    new line.
    <BLANKLINE>

A combo example:

::

    >>> text_indentation("Lorem ipsum dolor sit amet, consectetur adipiscing "
    ... "elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas "
    ... "commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, "
    ... "sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri "
    ... "nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est "
    ... "moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde "
    ... "sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid "
    ... "voles, postea. Quae animi affectio suum cuique tribuens atque hanc, "
    ... "quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas "
    ... "videres") # doctest: +NORMALIZE_WHITESPACE
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, 
    quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

Invalid Text
============

Passing an integer

::

    >>> text_indentation(7)
    Traceback (most recent call last):
    TypeError: text must be a string

Passing a dict

::

    >>> text_indentation({"one": 1, "two": 2})
    Traceback (most recent call last):
    TypeError: text must be a string

Passing None as argument

::

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string
